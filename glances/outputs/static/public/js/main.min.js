var glancesApp = angular.module('glancesApp', ['ngRoute', 'glances.config', 'fps.hotkeys'])

.config(["$routeProvider", "$locationProvider", function($routeProvider, $locationProvider) {
    $routeProvider.when('/', {
        template : '<glances arguments="arguments"></glances>',
        controller : 'statsController',
        resolve: {
            help: ["GlancesStats", function(GlancesStats) {
                return GlancesStats.getHelp();
            }],
            config: ["GlancesStats", function(GlancesStats) {
                return GlancesStats.getConfig();
            }],
            arguments: ["GlancesStats", function(GlancesStats) {
                return GlancesStats.getArguments();
            }]
        }
    });
}])
.run(["$rootScope", function($rootScope) {
      $rootScope.title = "Glances";
}]);

glancesApp.controller('statsController', ["$scope", "help", "config", "arguments", function ($scope, help, config, arguments) {
    $scope.help = help;
    $scope.config = config;
    $scope.arguments = arguments;
}]);

glancesApp.directive("sortableTh", function() {
    return {
        restrict: 'A',
        scope: {
            sorter: '='
        },
        link: function (scope, element, attrs) {

            element.addClass('sortable');

            scope.$watch(function() {
                return scope.sorter.column;
            }, function(newValue, oldValue) {

                if (angular.isArray(newValue)) {
                    if (newValue.indexOf(attrs.column) !== -1) {
                        element.addClass('sort');
                    } else {
                        element.removeClass('sort');
                    }
                } else {
                    if (attrs.column === newValue) {
                        element.addClass('sort');
                    } else {
                        element.removeClass('sort');
                    }
                }

            });

            element.on('click', function() {

                scope.sorter.column = attrs.column;

                scope.$apply();
            });
        }
    };
});
glancesApp.filter('min_size', function() {
    return function(input, max) {
        var max = max || 8;
        if (input.length > max) {
            return "_" + input.substring(input.length - max)
        }
        return input
    };
});
glancesApp.filter('exclamation', function() {
    return function(input) {
        if (input === undefined || input === '') {
            return '?';
        }
        return input;
    };
});

glancesApp.filter('bytes', function() {
    return function (bytes, low_precision) {
        low_precision = low_precision || false;
        if (isNaN(parseFloat(bytes)) || !isFinite(bytes) || bytes == 0){
            return bytes;
        }

        var symbols = ['K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y'];
        var prefix = {
          'Y': 1208925819614629174706176,
          'Z': 1180591620717411303424,
          'E': 1152921504606846976,
          'P': 1125899906842624,
          'T': 1099511627776,
          'G': 1073741824,
          'M': 1048576,
          'K': 1024
        };

        var reverseSymbols = _(symbols).reverse().value();
        for (var i = 0; i < reverseSymbols.length; i++) {
          var symbol = reverseSymbols[i];
          var value = bytes / prefix[symbol];

          if(value > 1) {
            var decimal_precision = 0;

            if(value < 10) {
              decimal_precision = 2;
            }
            else if(value < 100) {
              decimal_precision = 1;
            }

            if(low_precision) {
              if(symbol == 'MK') {
                decimal_precision = 0;
              }
              else {
                decimal_precision = _.min([1, decimal_precision]);
              }
            }
            else if(symbol == 'K') {
              decimal_precision = 0;
            }

            return parseFloat(value).toFixed(decimal_precision) + symbol;
          }
        }

        return bytes.toFixed(0);
    }
});

glancesApp.filter('bits', ["$filter", function($filter) {
    return function (bits, low_precision) {
      bits = Math.round(bits) * 8;
      return $filter('bytes')(bits, low_precision) + 'b';
    }
}]);

glancesApp.filter('leftPad', function() {
    return function (value, length, chars) {
      length = length || 0;
      chars = chars || ' ';
      return _.padStart(value, length, chars);
    }
});

glancesApp.filter('timemillis', function() {
    return function (array) {
      var sum = 0.0;
      for (var i = 0; i < array.length; i++) {
          sum += array[i] * 1000.0;
      }
      return sum;
    }
});

glancesApp.filter('timedelta', ["$filter", function($filter) {
    return function (value) {
      var sum = $filter('timemillis')(value);
      var d = new Date(sum);

      return {
        hours: d.getUTCHours(), // TODO : multiple days ( * (d.getDay() * 24)))
        minutes: d.getUTCMinutes(),
        seconds: d.getUTCSeconds(),
        milliseconds: parseInt("" + d.getUTCMilliseconds() / 10)
      };
    }
}]);

glancesApp.service('favicoService', function() {

  var favico = new Favico({
    animation : 'none'
  });

  this.badge = function(nb) {
    favico.badge(nb);
  };

  this.reset = function() {
    favico.reset();
  };
});

glancesApp.service('GlancesPluginHelper', function () {

    var plugin = {
        'limits': {},
        'limitSuffix': ['critical', 'careful', 'warning']
    };

    plugin.setLimits = function(limits){
        this.limits = limits;
    };

    plugin.getAlert = function (pluginName, limitNamePrefix, current, maximum, log) {
        current = current || 0;
        maximum = maximum || 100;
        log = log || false;

        var log_str = log ? '_log' : '';
        var value = (current * 100) / maximum;

        if (this.limits[pluginName] != undefined) {
            for (var i = 0; i < this.limitSuffix.length; i++) {
                var limitName = limitNamePrefix + this.limitSuffix[i];
                var limit = this.limits[pluginName][limitName];

                if (value >= limit) {
                    var pos = limitName.lastIndexOf("_");
                    var className = limitName.substring(pos + 1);

                    return className + log_str;
                }
            }
        }

        return "ok" + log_str;
    };

    plugin.getAlertLog = function (pluginName, limitNamePrefix, current, maximum) {
        return this.getAlert(pluginName, limitNamePrefix, current, maximum, true);
    };

    return plugin;
});

glancesApp.service('GlancesStats', ["$http", "$q", "GlancesPluginHelper", function($http, $q, GlancesPluginHelper) {

    var _config;

    this.getData = function() {
        return $q.all([
            this.getAllStats(),
            this.getAllViews()
        ]).then(function(results) {
            return {
                'stats': results[0],
                'view': results[1]
            };
        });
    };

    this.getAllStats = function() {
        return $http.get('api/2/all').then(function (response) {
            return response.data;
        });
    };

    this.getAllLimits = function() {
        return $http.get('api/2/all/limits').then(function (response) {
            return response.data;
        });
    };

    this.getAllViews = function() {
        return $http.get('api/2/all/views').then(function (response) {
            return response.data;
        });
    };

    this.getHelp = function() {
        return $http.get('api/2/help').then(function (response) {
            return response.data;
        });
    };

    this.getConfig = function() {
        if (!_config) {
            return $http.get('api/2/config').then(function (response) {
                _config = response.data;

                return response.data;
            });
        }

        var deferrer = $q.defer();
        deferrer.resolve(_config);

        return deferrer.promise;
    };

    this.getArguments = function() {
        return $http.get('api/2/args').then(function (response) {
            return response.data;
        });
    };

    // load limits to init GlancePlugin helper
    this.getAllLimits().then(function(limits) {
        GlancesPluginHelper.setLimits(limits);
    });

}]);
'use strict';

glancesApp.component('glances', {
    controller: GlancesController,
    bindings: {
      arguments: '<'
    },
    controllerAs: 'vm',
    templateUrl: 'components/glances/view.html'
});

'use strict';

function GlancesController($timeout, GlancesStats, REFRESH_TIME, Hotkeys) {
    var vm = this;

    vm.dataLoaded = false;
    vm.stats = {};

    var refreshDataSuccess = function (data) {
        data.isBsd = data.stats['system']['os_name'] === 'FreeBSD';
        data.isLinux = data.stats['system']['os_name'] === 'Linux';
        data.isMac = data.stats['system']['os_name'] === 'Darwin';
        data.isWindows = data.stats['system']['os_name'] === 'Windows';

        vm.stats = data;
        vm.is_disconnected = false;
        vm.dataLoaded = true;

        data = undefined;
        nextLoad();
    };

    var refreshDataError = function() {
        vm.is_disconnected = true;
        nextLoad();
    };

    vm.refreshData = function () {
        GlancesStats.getData().then(refreshDataSuccess, refreshDataError);
    };

    var loadPromise;
    var cancelNextLoad = function() {
      $timeout.cancel(loadPromise);
    };

    var nextLoad = function() {
      cancelNextLoad();
      loadPromise = $timeout(vm.refreshData, REFRESH_TIME * 1000); // in milliseconds
    };

    vm.refreshData();

    Hotkeys.registerHotkey(Hotkeys.createHotkey({
        key: 'm',
        callback: function () {
          console.log('Sort processes by MEM%');
        }
    }));
}

'use strict';

glancesApp.component('glancesHelp', {
    controller: GlancesHelpController,
    controllerAs: 'vm',
    bindings: {
    },
    templateUrl: 'components/help/view.html'
});

'use strict';

function GlancesHelpController(GlancesStats) {
    var vm = this;

    GlancesStats.getHelp().then(function(help) {
        vm.help = help;
    });
}

'use strict';

glancesApp.component('glancesPluginAlert', {
    controller: GlancesPluginAlertController,
    controllerAs: 'vm',
    bindings: {
      stats: '<'
    },
    templateUrl: 'components/plugin-alert/view.html'
});

'use strict';

function GlancesPluginAlertController(favicoService) {
    var vm = this;
    var _alerts = [];

    vm.$onChanges = function (changes) {
        var stats = changes.stats.currentValue;
        if (stats === undefined || stats.stats === undefined) {
            return;
        }

        var data = stats.stats['alert'];
        _alerts = [];

        if(!_.isArray(data)) {
            data = [];
        }

        for (var i = 0; i < data.length; i++) {
            var alertData = data[i];
            var alert = {};

            alert.name = alertData[3];
            alert.level = alertData[2];
            alert.begin = alertData[0] * 1000;
            alert.end = alertData[1] * 1000;
            alert.ongoing = alertData[1] == -1;
            alert.min = alertData[6];
            alert.mean = alertData[5];
            alert.max = alertData[4];

            if (!alert.ongoing) {
                var duration = alert.end - alert.begin;
                var seconds = parseInt((duration / 1000) % 60)
                    , minutes = parseInt((duration / (1000 * 60)) % 60)
                    , hours = parseInt((duration / (1000 * 60 * 60)) % 24);

                alert.duration = _.padStart(hours, 2, '0') + ":" + _.padStart(minutes, 2, '0') + ":" + _.padStart(seconds, 2, '0');
            }

            _alerts.push(alert);
        }

        if (vm.hasOngoingAlerts()) {
            favicoService.badge(vm.countOngoingAlerts());
        } else {
            favicoService.reset();
        }

        data = undefined;
    };

    vm.hasAlerts = function () {
        return _alerts.length > 0;
    };

    vm.getAlerts = function () {
        return _alerts;
    };

    vm.count = function () {
        return _alerts.length;
    };

    vm.hasOngoingAlerts = function () {
        return _.filter(_alerts, { 'ongoing': true }).length > 0;
    };

    vm.countOngoingAlerts = function () {
        return _.filter(_alerts, { 'ongoing': true }).length;
    }
}

'use strict';

glancesApp.component('glancesPluginCloud', {
    controller: GlancesPluginCloudController,
    controllerAs: 'vm',
    bindings: {
      stats: '<'
    },
    templateUrl: 'components/plugin-cloud/view.html'
});

'use strict';

function GlancesPluginCloudController() {
    var vm = this;

    vm.provider = null;
    vm.instance = null;

    vm.$onChanges = function (changes) {
        var stats = changes.stats.currentValue;
        if (stats === undefined || stats.stats === undefined) {
            return;
        }

        var data = stats.stats['cloud'];

        if (data['ami-id'] !== undefined) {
            vm.provider = 'AWS EC2';
            vm.instance =  data['instance-type'] + ' instance ' + data['instance-id'] + ' (' + data['region'] + ')';
        }

        data = undefined;
    };
}

'use strict';

glancesApp.component('glancesPluginCpu', {
    controller: GlancesPluginCpuController,
    controllerAs: 'vm',
    bindings: {
        stats: '<'
    },
    templateUrl: 'components/plugin-cpu/view.html'
});

'use strict';

function GlancesPluginCpuController() {
    var vm = this;
    var _view = {};

    vm.total = null;
    vm.user = null;
    vm.system = null;
    vm.idle = null;
    vm.nice = null;
    vm.irq = null;
    vm.iowait = null;
    vm.steal = null;
    vm.ctx_switches = null;
    vm.interrupts = null;
    vm.soft_interrupts = null;
    vm.syscalls = null;

    vm.$onChanges = function (changes) {
        var stats = changes.stats.currentValue;
        if (stats === undefined || stats.stats === undefined) {
            return;
        }

        var data = stats.stats['cpu'];
        _view = stats.view['cpu'];

        vm.total = data.total;
        vm.user = data.user;
        vm.system = data.system;
        vm.idle = data.idle;
        vm.nice = data.nice;
        vm.irq = data.irq;
        vm.iowait = data.iowait;
        vm.steal = data.steal;

        if (data.ctx_switches) {
            vm.ctx_switches = Math.floor(data.ctx_switches / data.time_since_update);
        }

        if (data.interrupts) {
            vm.interrupts = Math.floor(data.interrupts / data.time_since_update);
        }

        if (data.soft_interrupts) {
            vm.soft_interrupts = Math.floor(data.soft_interrupts / data.time_since_update);
        }

        if (data.syscalls) {
            vm.syscalls = Math.floor(data.syscalls / data.time_since_update);
        }

        data = undefined;
    };

    this.getDecoration = function (value) {
        if (_view[value] === undefined) {
            return;
        }

        return _view[value].decoration.toLowerCase();
    };
}

'use strict';

glancesApp.component('glancesPluginDiskio', {
    controller: GlancesPluginDiskioController,
    controllerAs: 'vm',
    bindings: {
        stats: '<',
        arguments: '<'
    },
    templateUrl: 'components/plugin-diskio/view.html'
});

'use strict';

function GlancesPluginDiskioController($filter) {
    var vm = this;

    vm.disks = [];

    vm.$onChanges = function (changes) {
        var stats = changes.stats.currentValue;
        if (stats === undefined || stats.stats === undefined) {
            return;
        }

        var data = stats.stats['diskio'];

        data = $filter('orderBy')(data,'disk_name');

        vm.disks = [];
        for (var i = 0; i < data.length; i++) {
            var diskioData = data[i];
            var timeSinceUpdate = diskioData['time_since_update'];

            vm.disks.push({
                'name': diskioData['disk_name'],
                'bitrate': {
                    'txps': $filter('bytes')(diskioData['read_bytes'] / timeSinceUpdate),
                    'rxps': $filter('bytes')(diskioData['write_bytes'] / timeSinceUpdate)
                },
                'count': {
                    'txps': $filter('bytes')(diskioData['read_count'] / timeSinceUpdate),
                    'rxps': $filter('bytes')(diskioData['write_count'] / timeSinceUpdate)
                },
                'alias': diskioData['alias'] !== undefined ? diskioData['alias'] : null
            });
        }

        data = undefined;
    };
}

'use strict';

glancesApp.component('glancesPluginFs', {
    controller: GlancesPluginFsController,
    controllerAs: 'vm',
    bindings: {
        stats: '<',
        arguments: '<'
    },
    templateUrl: 'components/plugin-fs/view.html'
});

'use strict';

function GlancesPluginFsController($filter) {
    var vm = this;
    var _view = {};

    vm.fileSystems = [];

    vm.$onChanges = function (changes) {
        var stats = changes.stats.currentValue;
        if (stats === undefined || stats.stats === undefined) {
            return;
        }

        var data = stats.stats['fs'];
        _view = stats.view['fs'];

        vm.fileSystems = [];
        for (var i = 0; i < data.length; i++) {
            var fsData = data[i];

            var shortMountPoint = fsData['mnt_point'];
            if (shortMountPoint.length > 9) {
                shortMountPoint = '_' + fsData['mnt_point'].slice(-8);
            }

            vm.fileSystems.push(fs = {
                'name': fsData['device_name'],
                'mountPoint': fsData['mnt_point'],
                'shortMountPoint': shortMountPoint,
                'percent': fsData['percent'],
                'size': fsData['size'],
                'used': fsData['used'],
                'free': fsData['free']
            });
        }

        vm.fileSystems = $filter('orderBy')(vm.fileSystems,'mnt_point');

        data = undefined;
    };

    vm.getDecoration = function(mountPoint, field) {
        if(_view[mountPoint][field] == undefined) {
            return;
        }

        return _view[mountPoint][field].decoration.toLowerCase();
    };
}

'use strict';

glancesApp.component('glancesPluginIp', {
    controller: GlancesPluginIpController,
    controllerAs: 'vm',
    bindings: {
        stats: '<',
        arguments: '<'
    },
    templateUrl: 'components/plugin-ip/view.html'
});

'use strict';

function GlancesPluginIpController() {
    var vm = this;

    vm.address = null;
    vm.gateway = null;
    vm.mask = null;
    vm.maskCidr = null;
    vm.publicAddress = null;

    vm.$onChanges = function (changes) {
        var stats = changes.stats.currentValue;
        if (stats === undefined || stats.stats === undefined) {
            return;
        }

        var data = stats.stats['ip'];

        vm.address = data.address;
        vm.gateway = data.gateway;
        vm.mask = data.mask;
        vm.maskCidr = data.mask_cidr;
        vm.publicAddress = data.public_address

        data = undefined;
    };
}

'use strict';

glancesApp.component('glancesPluginLoad', {
    controller: GlancesPluginLoadController,
    controllerAs: 'vm',
    bindings: {
        stats: '<'
    },
    templateUrl: 'components/plugin-load/view.html'
});

'use strict';

function GlancesPluginLoadController() {
    var vm = this;
    var _view = {};

    vm.cpucore = null;
    vm.min1 = null;
    vm.min5 = null;
    vm.min15 = null;

    vm.$onChanges = function (changes) {
      var stats = changes.stats.currentValue;
      if (stats === undefined || stats.stats === undefined) {
        return;
      }

      var data = stats.stats['load'];
      _view = stats.view['load'];

      vm.cpucore = data['cpucore'];
      vm.min1 = data['min1'];
      vm.min5 = data['min5'];
      vm.min15 = data['min15'];

        data = undefined;
    };

    this.getDecoration = function(value) {
    if(_view[value] === undefined) {
        return;
    }

    return _view[value].decoration.toLowerCase();
};
}

'use strict';

glancesApp.component('glancesPluginMem', {
    controller: GlancesPluginMemController,
    controllerAs: 'vm',
    bindings: {
        stats: '<'
    },
    templateUrl: 'components/plugin-mem/view.html'
});

'use strict';

function GlancesPluginMemController() {
    var vm = this;
    var _view = {};

    vm.percent = null;
    vm.total = null;
    vm.used = null;
    vm.free = null;

    vm.$onChanges = function (changes) {
        var stats = changes.stats.currentValue;
        if (stats === undefined || stats.stats === undefined) {
            return;
        }

        var data = stats.stats['mem'];
        _view = stats.view['mem'];

        vm.percent = data['percent'];
        vm.total = data['total'];
        vm.used = data['used'];
        vm.free = data['free'];

        data = undefined;
    };

    this.getDecoration = function (value) {
        if (_view[value] === undefined) {
            return;
        }

        return _view[value].decoration.toLowerCase();
    };
}

'use strict';

glancesApp.component('glancesPluginMemMore', {
    controller: GlancesPluginMemMoreController,
    controllerAs: 'vm',
    bindings: {
        stats: '<'
    },
    templateUrl: 'components/plugin-mem-more/view.html'
});

'use strict';

function GlancesPluginMemMoreController() {
    var vm = this;

    vm.active = null;
    vm.inactive = null;
    vm.buffers = null;
    vm.cached = null;

    vm.$onChanges = function (changes) {
        var stats = changes.stats.currentValue;
        if (stats === undefined || stats.stats === undefined) {
            return;
        }

        var data = stats.stats['mem'];

        vm.active = data['active'];
        vm.inactive = data['inactive'];
        vm.buffers = data['buffers'];
        vm.cached = data['cached'];

        data = undefined;
    };
}

'use strict';

glancesApp.component('glancesPluginMemswap', {
    controller: GlancesPluginMemswapController,
    controllerAs: 'vm',
    bindings: {
        stats: '<'
    },
    templateUrl: 'components/plugin-memswap/view.html'
});

'use strict';

function GlancesPluginMemswapController() {
    var vm = this;
    var _view = {};

    vm.percent = null;
    vm.total = null;
    vm.used = null;
    vm.free = null;

    vm.$onChanges = function (changes) {
        var stats = changes.stats.currentValue;
        if (stats === undefined || stats.stats === undefined) {
            return;
        }

        var data = stats.stats['memswap'];
        _view = stats.view['memswap'];

        vm.percent = data['percent'];
        vm.total = data['total'];
        vm.used = data['used'];
        vm.free = data['free'];

        data = undefined;
    };

    this.getDecoration = function (value) {
        if (_view[value] === undefined) {
            return;
        }

        return _view[value].decoration.toLowerCase();
    };
}

'use strict';

glancesApp.component('glancesPluginNetwork', {
    controller: GlancesPluginNetworkController,
    controllerAs: 'vm',
    bindings: {
        stats: '<',
        arguments: '<'
    },
    templateUrl: 'components/plugin-network/view.html'
});

'use strict';

function GlancesPluginNetworkController($filter) {
    var vm = this;

    vm.networks = [];

    vm.$onChanges = function (changes) {
        var stats = changes.stats.currentValue;
        if (stats === undefined || stats.stats === undefined) {
            return;
        }

        var data = stats.stats['network'];

        vm.networks = [];
        for (var i = 0; i < data.length; i++) {
            var networkData = data[i];

            var network = {
                'interfaceName': networkData['interface_name'],
                'rx': networkData['rx'],
                'tx': networkData['tx'],
                'cx': networkData['cx'],
                'time_since_update': networkData['time_since_update'],
                'cumulativeRx': networkData['cumulative_rx'],
                'cumulativeTx': networkData['cumulative_tx'],
                'cumulativeCx': networkData['cumulative_cx']
            };

            vm.networks.push(network);
        }

        vm.networks = $filter('orderBy')(vm.networks, 'interfaceName');

        data = undefined;
    };
}

'use strict';

glancesApp.component('glancesPluginPercpu', {
    controller: GlancesPluginPercpuController,
    controllerAs: 'vm',
    bindings: {
        stats: '<'
    },
    templateUrl: 'components/plugin-percpu/view.html'
});

'use strict';

function GlancesPluginPercpuController(GlancesPluginHelper) {
    var vm = this;
    vm.cpus = [];

    vm.$onChanges = function (changes) {
        var stats = changes.stats.currentValue;
        if (stats === undefined || stats.stats === undefined) {
            return;
        }

        var data = stats.stats['percpu'];

        vm.cpus = [];

        for (var i = 0; i < data.length; i++) {
            var cpuData = data[i];

            vm.cpus.push({
                'total': cpuData.total,
                'user': cpuData.user,
                'system': cpuData.system,
                'idle': cpuData.idle,
                'iowait': cpuData.iowait,
                'steal': cpuData.steal
            });
        }

        data = undefined;
    };

    vm.getUserAlert = function(cpu) {
        return GlancesPluginHelper.getAlert('percpu', 'percpu_user_', cpu.user)
    };

    vm.getSystemAlert = function(cpu) {
        return GlancesPluginHelper.getAlert('percpu', 'percpu_system_', cpu.system);
    };
}

'use strict';

glancesApp.component('glancesPluginPorts', {
    controller: GlancesPluginPortsController,
    controllerAs: 'vm',
    bindings: {
        stats: '<'
    },
    templateUrl: 'components/plugin-ports/view.html'
});

'use strict';

function GlancesPluginPortsController() {
    var vm = this;

    vm.ports = [];

    vm.$onChanges = function (changes) {
        var stats = changes.stats.currentValue;
        if (stats === undefined || stats.stats === undefined) {
            return;
        }

        var data = stats.stats['ports'];

        vm.ports = [];
        angular.forEach(data, function(port) {
            vm.ports.push(port);
        }, this);

        data = undefined;
    };

    vm.getDecoration = function(port) {
        if (port.status === null) {
            return 'careful';
        }

        if (port.status === false) {
            return 'critical';
        }

        if (port.rtt_warning !== null && port.status > port.rtt_warning) {
            return 'warning';
        }

        return 'ok';
    };
}

'use strict';

glancesApp.component('glancesPluginProcess', {
    controller: GlancesPluginProcessController,
    controllerAs: 'vm',
    bindings: {
        stats: '<',
        arguments: '<'
    },
    templateUrl: 'components/plugin-process/view.html'
});

'use strict';

function GlancesPluginProcessController() {
    var vm = this;

    vm.sorter = {
        column: "cpu_percent",
        auto: true,
        isReverseColumn: function (column) {
            return !(column === 'username' || column === 'name');
        },
        getColumnLabel: function (column) {
            if (_.isEqual(column, ['io_read', 'io_write'])) {
                return 'io_counters';
            } else {
                return column;
            }
        }
    };
}

'use strict';

glancesApp.component('glancesPluginProcesscount', {
    controller: GlancesPluginProcesscountController,
    controllerAs: 'vm',
    bindings: {
        stats: '<',
        sorter: '<'
    },
    templateUrl: 'components/plugin-processcount/view.html'
});

'use strict';

function GlancesPluginProcesscountController() {
    var vm = this;

    vm.total  = null;
    vm.running = null;
    vm.sleeping = null;
    vm.stopped = null;
    vm.thread = null;

    vm.$onChanges = function (changes) {
        var stats = changes.stats.currentValue;
        if (stats === undefined || stats.stats === undefined) {
            return;
        }

        var data = stats.stats['processcount'];

        vm.total = data['total'] || 0;
        vm.running = data['running'] || 0;
        vm.sleeping = data['sleeping'] || 0;
        vm.stopped = data['stopped'] || 0;
        vm.thread = data['thread'] || 0;

        data = undefined;
    };
}

'use strict';

glancesApp.component('glancesPluginProcesslist', {
    controller: GlancesPluginProcesslistController,
    controllerAs: 'vm',
    bindings: {
        stats: '<',
        arguments: '<',
        sorter: '<'
    },
    templateUrl: 'components/plugin-processlist/view.html'
});

'use strict';

function GlancesPluginProcesslistController(GlancesPluginHelper, $filter, GlancesStats) {
    var vm = this;

    var _maxProcessesToDisplay = undefined;
    vm.processes = [];
    vm.ioReadWritePresent = false;

    GlancesStats.getConfig().then(function(config) {
        _maxProcessesToDisplay = config.outputs !== undefined ? config.outputs.max_processes_display : undefined;
    });

    vm.$onChanges = function (changes) {
        var stats = changes.stats.currentValue;
        if (stats === undefined || stats.stats === undefined) {
            return;
        }

        var data = stats.stats['processlist'];

        vm.processes = [];
        vm.ioReadWritePresent = false;

        for (var i = 0; i < data.length; i++) {
            var process = data[i];

            process.memvirt = process.memory_info[1];
            process.memres  = process.memory_info[0];
            process.timeplus = $filter('timedelta')(process.cpu_times);
            process.timemillis = $filter('timemillis')(process.cpu_times);

            process.ioRead = null;
            process.ioWrite = null;

            if (process.io_counters) {
                vm.ioReadWritePresent = true;

                process.ioRead  = (process.io_counters[0] - process.io_counters[2]) / process.time_since_update;

                if (process.ioRead != 0) {
                    process.ioRead = $filter('bytes')(process.ioRead);
                }

                process.ioWrite = (process.io_counters[1] - process.io_counters[3]) / process.time_since_update;

                if (process.ioWrite != 0) {
                    process.ioWrite = $filter('bytes')(process.ioWrite);
                }
            }

            process.isNice = process.nice !== undefined && ((stats.isWindows && process.nice != 32) || (!stats.isWindows && process.nice != 0));

            if (Array.isArray(process.cmdline)) {
                process.cmdline = process.cmdline.join(' ');
            }

            vm.processes.push(process);
        }

        data = undefined;
    };

    vm.getCpuPercentAlert = function(process) {
        return GlancesPluginHelper.getAlert('processlist', 'processlist_cpu_', process.cpu_percent);
    };

    vm.getMemoryPercentAlert = function(process) {
        return GlancesPluginHelper.getAlert('processlist', 'processlist_mem_', process.cpu_percent);
    };

    vm.getLimit = function() {
        return _maxProcessesToDisplay;
    };
}

'use strict';

glancesApp.component('glancesPluginQuicklook', {
    controller: GlancesPluginQuicklookController,
    controllerAs: 'vm',
    bindings: {
        stats: '<',
        arguments: '<'
    },
    templateUrl: 'components/plugin-quicklook/view.html'
});

'use strict';

function GlancesPluginQuicklookController() {
    var vm = this;
    var _view = {};

    vm.mem = null;
    vm.cpu = null;
    vm.cpu_name = null;
    vm.cpu_hz_current = null;
    vm.cpu_hz = null;
    vm.swap = null;
    vm.percpus = [];

    vm.$onChanges = function (changes) {
        var stats = changes.stats.currentValue;
        if (stats === undefined || stats.stats === undefined) {
            return;
        }

        var data = stats.stats['quicklook'];
        _view = stats.view['quicklook'];

        vm.mem = data.mem;
        vm.cpu = data.cpu;
        vm.cpu_name = data.cpu_name;
        vm.cpu_hz_current = data.cpu_hz_current;
        vm.cpu_hz = data.cpu_hz;
        vm.swap = data.swap;
        vm.percpus = [];

        angular.forEach(data.percpu, function(cpu) {
            vm.percpus.push({
                'number': cpu.cpu_number,
                'total': cpu.total
            });
        }, this);

        data = undefined;
    };

    this.getDecoration = function (value) {
        if (_view[value] === undefined) {
            return;
        }

        return _view[value].decoration.toLowerCase();
    };
}

'use strict';

glancesApp.component('glancesPluginSystem', {
    controller: GlancesPluginSystemController,
    controllerAs: 'vm',
    bindings: {
        stats: '<',
        isDisconnected: '<'
    },
    templateUrl: 'components/plugin-system/view.html'
});

'use strict';

function GlancesPluginSystemController() {
    var vm = this;

    vm.hostname = null;
    vm.platform = null;
    vm.humanReadableName = null;
    vm.os = {
        'name': null,
        'version': null
    };

    vm.$onChanges = function (changes) {
        var stats = changes.stats.currentValue;
        if (stats === undefined || stats.stats === undefined) {
            return;
        }

        var data = stats.stats['system'];

        vm.hostname = data['hostname'];
        vm.platform = data['platform'];
        vm.os.name = data['os_name'];
        vm.os.version = data['os_version'];
        vm.humanReadableName = data['hr_name'];

        data = undefined;
    };
}

'use strict';

glancesApp.component('glancesPluginUptime', {
    controller: GlancesPluginUptimeController,
    controllerAs: 'vm',
    bindings: {
        stats: '<'
    },
    templateUrl: 'components/plugin-uptime/view.html'
});

'use strict';

function GlancesPluginUptimeController() {
    var vm = this;

    vm.value = null;

    vm.$onChanges = function (changes) {
        var stats = changes.stats.currentValue;
        if (stats === undefined || stats.stats === undefined) {
            return;
        }

        vm.value = stats.stats['uptime'];
    };
}

'use strict';

glancesApp.component('glancesPluginWifi', {
    controller: GlancesPluginWifiController,
    controllerAs: 'vm',
    bindings: {
        stats: '<'
    },
    templateUrl: 'components/plugin-wifi/view.html'
});

'use strict';

function GlancesPluginWifiController($filter) {
    var vm = this;
    var _view = {};

    vm.hotspots = [];

    vm.$onChanges = function (changes) {
        var stats = changes.stats.currentValue;
        if (stats === undefined || stats.stats === undefined) {
            return;
        }

        var data = stats.stats['wifi'];
        _view = stats.view['wifi'];

        vm.hotspots = [];
        for (var i = 0; i < data.length; i++) {
            var hotspotData = data[i];

            if (hotspotData['ssid'] === '') {
                continue;
            }

            vm.hotspots.push({
                'ssid': hotspotData['ssid'],
                'encrypted': hotspotData['encrypted'],
                'signal': hotspotData['signal'],
                'encryption_type': hotspotData['encryption_type']
            });
        }

        vm.hotspots = $filter('orderBy')(vm.hotspots, 'ssid');

        data = undefined;
    };

    vm.getDecoration = function(hotpost, field) {
        if(_view[hotpost.ssid][field] == undefined) {
            return;
        }

        return _view[hotpost.ssid][field].decoration.toLowerCase();
    };
}
