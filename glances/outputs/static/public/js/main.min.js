var glancesApp = angular.module('glancesApp', ['ngRoute'])

.config(["$routeProvider", "$locationProvider", function($routeProvider, $locationProvider) {
    $routeProvider.when('/:refresh_time?', {
        templateUrl : 'stats.html',
        controller : 'statsController',
        resolve: {
            help: ["GlancesStats", function(GlancesStats) {
                return GlancesStats.getHelp();
            }],
            config: ["GlancesStats", function(GlancesStats) {
                return GlancesStats.getConfig();
            }],
            arguments: ["GlancesStats", "$route", function(GlancesStats, $route) {
                return GlancesStats.getArguments().then(function(arguments) {
                    var refreshTimeRoute = parseInt($route.current.params.refresh_time);
                    if (!isNaN(refreshTimeRoute) && refreshTimeRoute > 1) {
                        arguments.time = refreshTimeRoute;
                    }

                    return arguments;
                });
            }]
        }
    });

    $locationProvider.html5Mode(true);
}])
.run(["$rootScope", function($rootScope) {
      $rootScope.title = "Glances";
}]);

glancesApp.controller('statsController', ["$scope", "help", "config", "arguments", function ($scope, help, config, arguments) {
    $scope.help = help;
    $scope.config = config;
    $scope.arguments = arguments;
}]);

glancesApp.directive("sortableTh", function() {
    return {
        restrict: 'A',
        scope: {
            sorter: '='
        },
        link: function (scope, element, attrs) {

            element.addClass('sortable');

            scope.$watch(function() {
                return scope.sorter.column;
            }, function(newValue, oldValue) {

                if (angular.isArray(newValue)) {
                    if (newValue.indexOf(attrs.column) !== -1) {
                        element.addClass('sort');
                    } else {
                        element.removeClass('sort');
                    }
                } else {
                    if (attrs.column === newValue) {
                        element.addClass('sort');
                    } else {
                        element.removeClass('sort');
                    }
                }

            });

            element.on('click', function() {

                scope.sorter.column = attrs.column;

                scope.$apply();
            });
        }
    };
});
glancesApp.service('favicoService', function() {

  var favico = new Favico({
    animation : 'none'
  });

  this.badge = function(nb) {
    favico.badge(nb);
  };

  this.reset = function() {
    favico.reset();
  };
});

glancesApp.filter('min_size', function() {
    return function(input, max) {
        var max = max || 8;
        if (input.length > max) {
            return "_" + input.substring(input.length - max)
        }
        return input
    };
});
glancesApp.filter('exclamation', function() {
    return function(input) {
        if (input === undefined || input === '') {
            return '?';
        }
        return input;
    };
});

glancesApp.filter('bytes', function() {
    return function (bytes, low_precision) {
        low_precision = low_precision || false;
        if (isNaN(parseFloat(bytes)) || !isFinite(bytes) || bytes == 0){
            return bytes;
        }

        var symbols = ['K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y'];
        var prefix = {
          'Y': 1208925819614629174706176,
          'Z': 1180591620717411303424,
          'E': 1152921504606846976,
          'P': 1125899906842624,
          'T': 1099511627776,
          'G': 1073741824,
          'M': 1048576,
          'K': 1024
        };

        var reverseSymbols = _(symbols).reverse().value();
        for (var i = 0; i < reverseSymbols.length; i++) {
          var symbol = reverseSymbols[i];
          var value = bytes / prefix[symbol];

          if(value > 1) {
            var decimal_precision = 0;

            if(value < 10) {
              decimal_precision = 2;
            }
            else if(value < 100) {
              decimal_precision = 1;
            }

            if(low_precision) {
              if(symbol == 'MK') {
                decimal_precision = 0;
              }
              else {
                decimal_precision = _.min([1, decimal_precision]);
              }
            }
            else if(symbol == 'K') {
              decimal_precision = 0;
            }

            return parseFloat(value).toFixed(decimal_precision) + symbol;
          }
        }

        return bytes.toFixed(0);
    }
});

glancesApp.filter('bits', ["$filter", function($filter) {
    return function (bits, low_precision) {
      bits = Math.round(bits) * 8;
      return $filter('bytes')(bits, low_precision) + 'b';
    }
}]);

glancesApp.filter('leftPad', ["$filter", function($filter) {
    return function (value, length, chars) {
      length = length || 0;
      chars = chars || ' ';
      return _.padStart(value, length, chars);
    }
}]);

glancesApp.filter('timemillis', function() {
    return function (array) {
      var sum = 0.0;
      for (var i = 0; i < array.length; i++) {
          sum += array[i] * 1000.0;
      }
      return sum;
    }
});

glancesApp.filter('timedelta', ["$filter", function($filter) {
    return function (value) {
      var sum = $filter('timemillis')(value);
      var d = new Date(sum);

      return {
        hours: d.getUTCHours(), // TODO : multiple days ( * (d.getDay() * 24)))
        minutes: d.getUTCMinutes(),
        seconds: d.getUTCSeconds(),
        milliseconds: parseInt("" + d.getUTCMilliseconds() / 10)
      };
    }
}]);

glancesApp.service('GlancesStats', ["$http", "$q", function($http, $q) {
    var _stats = [], _views = [], _limits = [], _config = {};

    this.getData = function() {
        return $q.all([
            this.getAllStats(),
            this.getAllViews()
        ]).then(function(results) {
            return {
                'stats': results[0],
                'view': results[1]
            };
        });
    };

    this.getAllStats = function() {
        return $http.get('/api/2/all').then(function (response) {
            _stats = response.data;

            return response.data;
        });
    };

    this.getAllLimits = function() {
        return $http.get('/api/2/all/limits').then(function (response) {
            _limits = response.data;

            return response.data;
        });
    };

    this.getAllViews = function() {
        return $http.get('/api/2/all/views').then(function (response) {
            _views = response.data;

            return response.data;
        });
    };

    this.getHelp = function() {
        return $http.get('/api/2/help').then(function (response) {
            return response.data;
        });
    };

    this.getConfig = function() {
        return $http.get('/api/2/config').then(function (response) {
            _config = response.data;

            return _config;
        });
    };

    this.getArguments = function() {
        return $http.get('/api/2/args').then(function (response) {
            return response.data;
        });
    };

}]);

var keycodes = {
	'a' : '65',
	'c' : '67',
	'm' : '77',
	'p' : '80',
	'i' : '73',
	't' : '84',
	'u' : '85',
	'd' : '68',
	'f' : '70',
	'n' : '78',
	's' : '83',
	'z' : '90',
	'e' : '69',
	'SLASH': '191',
	'D' : '68',
	'b' : '66',
	'l' : '76',
	'w' : '87',
	'x' : '88',
	'ONE': '49',
	'TWO': '50',
	'THREE': '51',
	'FOUR': '52',
	'FIVE': '53',
	'SIX': '54',
	'h' : '72',
	'T' : '84',
	'F' : '70',
	'g' : '71',
	'r' : '82',
	'q' : '81',
	'A' : '65',
	'Q' : '81'
}

'use strict';

glancesApp.component('glances', {
    controller: GlancesController,
    bindings: {
      arguments: '<',
      config: '<',
      help: '<'
    },
    controllerAs: 'vm',
    templateUrl: 'components/glances/view.html'
});

'use strict';

function GlancesController($interval, GlancesStats) {
    var vm = this;

    vm.sorter = {
        column: "cpu_percent",
        auto: true,
        isReverseColumn: function (column) {
            return !(column == 'username' || column == 'name');
        },
        getColumnLabel: function (column) {
            if (_.isEqual(column, ['io_read', 'io_write'])) {
                return 'io_counters';
            } else {
                return column;
            }
        }
    };

    vm.dataLoaded = false;
    vm.stats = {};
    vm.refreshData = function () {
        GlancesStats.getData().then(function (data) {

            data.isBsd = data.stats['system']['os_name'] === 'FreeBSD';
            data.isLinux = data.stats['system']['os_name'] === 'Linux';
            data.isMac = data.stats['system']['os_name'] === 'Darwin';
            data.isWindows = data.stats['system']['os_name'] === 'Windows';

            vm.stats = data;
            vm.is_disconnected = false;
            vm.dataLoaded = true;
        }, function() {
            vm.is_disconnected = true;
        });
    };

    vm.refreshData();
    var refreshTime = 60; // arguments.time
    $interval(function () {
        vm.refreshData();
    }, refreshTime * 1000); // in milliseconds

    vm.onKeyDown = function ($event) {
        switch (true) {
            case !$event.shiftKey && $event.keyCode == keycodes.a:
                // a => Sort processes automatically
                vm.sorter.column = "cpu_percent";
                vm.sorter.auto = true;
                break;
            case $event.shiftKey && $event.keyCode == keycodes.A:
                // A => Enable/disable AMPs
                vm.arguments.disable_amps = !vm.arguments.disable_amps;
                break;
            case !$event.shiftKey && $event.keyCode == keycodes.c:
                // c => Sort processes by CPU%
                vm.sorter.column = "cpu_percent";
                vm.sorter.auto = false;
                break;
            case !$event.shiftKey && $event.keyCode == keycodes.m:
                // m => Sort processes by MEM%
                vm.sorter.column = "memory_percent";
                vm.sorter.auto = false;
                break;
            case !$event.shiftKey && $event.keyCode == keycodes.u:
                // u => Sort processes by user
                vm.sorter.column = "username";
                vm.sorter.auto = false;
                break;
            case !$event.shiftKey && $event.keyCode == keycodes.p:
                // p => Sort processes by name
                vm.sorter.column = "name";
                vm.sorter.auto = false;
                break;
            case !$event.shiftKey && $event.keyCode == keycodes.i:
                // i => Sort processes by I/O rate
                vm.sorter.column = ['io_read', 'io_write'];
                vm.sorter.auto = false;
                break;
            case !$event.shiftKey && $event.keyCode == keycodes.t:
                // t => Sort processes by time
                vm.sorter.column = "timemillis";
                vm.sorter.auto = false;
                break;
            case !$event.shiftKey && $event.keyCode == keycodes.d:
                // d => Show/hide disk I/O stats
                vm.arguments.disable_diskio = !vm.arguments.disable_diskio;
                break;
            case $event.shiftKey && $event.keyCode == keycodes.Q:
                // Q => Show/hide IRQ
                vm.arguments.enable_irq = !vm.arguments.enable_irq;
                break;
            case !$event.shiftKey && $event.keyCode == keycodes.f:
                // f => Show/hide filesystem stats
                vm.arguments.disable_fs = !vm.arguments.disable_fs;
                break;
            case !$event.shiftKey && $event.keyCode == keycodes.n:
                // n => Show/hide network stats
                vm.arguments.disable_network = !vm.arguments.disable_network;
                break;
            case !$event.shiftKey && $event.keyCode == keycodes.s:
                // s => Show/hide sensors stats
                vm.arguments.disable_sensors = !vm.arguments.disable_sensors;
                break;
            case $event.shiftKey && $event.keyCode == keycodes.TWO:
                // 2 => Show/hide left sidebar
                vm.arguments.disable_left_sidebar = !vm.arguments.disable_left_sidebar;
                break;
            case !$event.shiftKey && $event.keyCode == keycodes.z:
                // z => Enable/disable processes stats
                vm.arguments.disable_process = !vm.arguments.disable_process;
                break;
            case $event.keyCode == keycodes.SLASH:
                // SLASH => Enable/disable short processes name
                vm.arguments.process_short_name = !vm.arguments.process_short_name;
                break;
            case $event.shiftKey && $event.keyCode == keycodes.D:
                // D => Enable/disable Docker stats
                vm.arguments.disable_docker = !vm.arguments.disable_docker;
                break;
            case !$event.shiftKey && $event.keyCode == keycodes.b:
                // b => Bytes or bits for network I/O
                vm.arguments.byte = !vm.arguments.byte;
               break;
            case $event.shiftKey && $event.keyCode == keycodes.b:
               // 'B' => Switch between bit/s and IO/s for Disk IO
                vm.arguments.diskio_iops = !vm.arguments.diskio_iops;
               break;
            case !$event.shiftKey && $event.keyCode == keycodes.l:
                // l => Show/hide alert logs
                vm.arguments.disable_alert = !vm.arguments.disable_alert;
               break;
            case $event.shiftKey && $event.keyCode == keycodes.ONE:
               // 1 => Global CPU or per-CPU stats
               vm.arguments.percpu = !vm.arguments.percpu;
               break;
            case !$event.shiftKey && $event.keyCode == keycodes.h:
                // h => Show/hide this help screen
                vm.arguments.help_tag = !vm.arguments.help_tag;
                break;
            case $event.shiftKey && $event.keyCode == keycodes.T:
                // T => View network I/O as combination
                vm.arguments.network_sum = !vm.arguments.network_sum;
                break;
            case $event.shiftKey && $event.keyCode == keycodes.u:
                // U => View cumulative network I/O
                vm.arguments.network_cumul = !vm.arguments.network_cumul;
                break;
            case $event.shiftKey && $event.keyCode == keycodes.f:
                // F => Show filesystem free space
                vm.arguments.fs_free_space = !vm.arguments.fs_free_space;
                break;
            case $event.shiftKey && $event.keyCode == keycodes.THREE:
                // 3 => Enable/disable quick look plugin
                vm.arguments.disable_quicklook = !vm.arguments.disable_quicklook;
                break;
            case $event.shiftKey && $event.keyCode == keycodes.SIX:
                // 6 => Enable/disable mean gpu
                vm.arguments.meangpu = !vm.arguments.meangpu;
                break;
            case $event.shiftKey && $event.keyCode == keycodes.g:
                // G => Enable/disable gpu
                vm.arguments.disable_gpu = !vm.arguments.disable_gpu;
                break;
            case $event.shiftKey && $event.keyCode == keycodes.FIVE:
                vm.arguments.disable_quicklook = !vm.arguments.disable_quicklook;
                vm.arguments.disable_cpu = !vm.arguments.disable_cpu;
                vm.arguments.disable_mem = !vm.arguments.disable_mem;
                vm.arguments.disable_memswap = !vm.arguments.disable_memswap;
                vm.arguments.disable_load = !vm.arguments.disable_load;
                vm.arguments.disable_gpu = !vm.arguments.disable_gpu;
                break;
            case $event.shiftKey && $event.keyCode == keycodes.i:
                // I => Show/hide IP module
                vm.arguments.disable_ip = !vm.arguments.disable_ip;
                break;
            case $event.shiftKey && $event.keyCode == keycodes.p:
                // I => Enable/disable ports module
                vm.arguments.disable_ports = !vm.arguments.disable_ports;
                break;
            case $event.shiftKey && $event.keyCode == keycodes.w:
                // 'W' > Enable/Disable Wifi plugin
                vm.arguments.disable_wifi = !vm.arguments.disable_wifi;
                break;
        }
    };
}

'use strict';

glancesApp.component('glancesPluginCloud', {
    controller: GlancesPluginCloudController,
    controllerAs: 'vm',
    bindings: {
      stats: '<'
    },
    templateUrl: 'components/plugin-cloud/view.html'
});

'use strict';

function GlancesPluginCloudController() {
    var vm = this;

    vm.provider = null;
    vm.instance = null;

    vm.$onChanges = function (changes) {
        var stats = changes.stats.currentValue;
        if (stats === undefined || stats.stats === undefined) {
            return;
        }

        var data = stats.stats['cloud'];

        if (data['ami-id'] !== undefined) {
            vm.provider = 'AWS EC2';
            vm.instance =  data['instance-type'] + ' instance ' + data['instance-id'] + ' (' + data['region'] + ')';
        }
    };
}

'use strict';

glancesApp.component('glancesHelp', {
    controller: GlancesHelpController,
    controllerAs: 'vm',
    bindings: {
      help: '<',
    },
    templateUrl: 'components/help/view.html'
});

'use strict';

function GlancesHelpController() {
    var vm = this;
}

'use strict';

glancesApp.component('glancesPluginCpu', {
    controller: GlancesPluginCpuController,
    controllerAs: 'vm',
    bindings: {
        stats: '<'
    },
    templateUrl: 'components/plugin-cpu/view.html'
});

'use strict';

function GlancesPluginCpuController() {
    var vm = this;
    var _view = {};

    vm.total = null;
    vm.user = null;
    vm.system = null;
    vm.idle = null;
    vm.nice = null;
    vm.irq = null;
    vm.iowait = null;
    vm.steal = null;
    vm.ctx_switches = null;
    vm.interrupts = null;
    vm.soft_interrupts = null;
    vm.syscalls = null;

    vm.$onChanges = function (changes) {
        var stats = changes.stats.currentValue;
        if (stats === undefined || stats.stats === undefined) {
            return;
        }

        var data = stats.stats['cpu'];
        _view = stats.view['cpu'];

        vm.total = data.total;
        vm.user = data.user;
        vm.system = data.system;
        vm.idle = data.idle;
        vm.nice = data.nice;
        vm.irq = data.irq;
        vm.iowait = data.iowait;
        vm.steal = data.steal;

        if (data.ctx_switches) {
            vm.ctx_switches = Math.floor(data.ctx_switches / data.time_since_update);
        }

        if (data.interrupts) {
            vm.interrupts = Math.floor(data.interrupts / data.time_since_update);
        }

        if (data.soft_interrupts) {
            vm.soft_interrupts = Math.floor(data.soft_interrupts / data.time_since_update);
        }

        if (data.syscalls) {
            vm.syscalls = Math.floor(data.syscalls / data.time_since_update);
        }
    };

    this.getDecoration = function (value) {
        if (_view[value] === undefined) {
            return;
        }

        return _view[value].decoration.toLowerCase();
    };
}

'use strict';

glancesApp.component('glancesPluginLoad', {
    controller: GlancesPluginLoadController,
    controllerAs: 'vm',
    bindings: {
        stats: '<'
    },
    templateUrl: 'components/plugin-load/view.html'
});

'use strict';

function GlancesPluginLoadController() {
    var vm = this;
    var _view = {};

    vm.cpucore = null;
    vm.min1 = null;
    vm.min5 = null;
    vm.min15 = null;

    vm.$onChanges = function (changes) {
      var stats = changes.stats.currentValue;
      if (stats === undefined || stats.stats === undefined) {
        return;
      }

      var data = stats.stats['load'];
      _view = stats.view['load'];

      vm.cpucore = data['cpucore'];
      vm.min1 = data['min1'];
      vm.min5 = data['min5'];
      vm.min15 = data['min15'];
    };

    this.getDecoration = function(value) {
    if(_view[value] === undefined) {
        return;
    }

    return _view[value].decoration.toLowerCase();
};
}

'use strict';

glancesApp.component('glancesPluginSystem', {
    controller: GlancesPluginSystemController,
    controllerAs: 'vm',
    bindings: {
        stats: '<',
        isDisconnected: '<'
    },
    templateUrl: 'components/plugin-system/view.html'
});

'use strict';

function GlancesPluginSystemController() {
    var vm = this;

    vm.hostname  = null;
    vm.platform = null;
    vm.humanReadableName = null;
    vm.os = {
        'name': null,
        'version': null
    };

    vm.$onChanges = function (changes) {
      var stats = changes.stats.currentValue;
      if (stats === undefined || stats.stats === undefined) {
        return;
      }

      var data = stats.stats['system'];

      vm.hostname = data['hostname'];
      vm.platform = data['platform'];
      vm.os.name = data['os_name'];
      vm.os.version = data['os_version'];
      vm.humanReadableName = data['hr_name'];
    };
}

'use strict';

glancesApp.component('glancesPluginIp', {
    controller: GlancesPluginIpController,
    controllerAs: 'vm',
    bindings: {
        stats: '<'
    },
    templateUrl: 'components/plugin-ip/view.html'
});

'use strict';

function GlancesPluginIpController() {
    var vm = this;

    this.address  = null;
    this.gateway = null;
    this.mask = null;
    this.maskCidr = null;
    this.publicAddress = null;

    vm.$onChanges = function (changes) {
      var stats = changes.stats.currentValue;
      if (stats === undefined || stats.stats === undefined) {
        return;
      }

      var data = stats.stats['ip'];

      vm.address = data.address;
      vm.gateway = data.gateway;
      vm.mask = data.mask;
      vm.maskCidr = data.mask_cidr;
      vm.publicAddress = data.public_address
    };
}

'use strict';

glancesApp.component('glancesPluginUptime', {
    controller: GlancesPluginUptimeController,
    controllerAs: 'vm',
    bindings: {
        stats: '<'
    },
    templateUrl: 'components/plugin-uptime/view.html'
});

'use strict';

function GlancesPluginUptimeController() {
    var vm = this;

    this.value = null

    vm.$onChanges = function (changes) {
      var stats = changes.stats.currentValue;
      if (stats === undefined || stats.stats === undefined) {
        return;
      }

      vm.value = stats.stats['uptime'];
    };
}

glancesApp.service('GlancesPluginProcessList', ["$filter", "GlancesPlugin", function($filter, GlancesPlugin) {
    var _pluginName = "processlist";
    var _maxProcessesToDisplay = undefined;
    this.processes = [];
    this.ioReadWritePresent = false;

    this.setData = function(data, views, config) {
        this.processes = [];
        this.ioReadWritePresent = false;
        _maxProcessesToDisplay = config.outputs !== undefined ? config.outputs.max_processes_display : undefined;;

        for (var i = 0; i < data[_pluginName].length; i++) {
            var process = data[_pluginName][i];

            process.memvirt = process.memory_info[1];
            process.memres  = process.memory_info[0];
            process.timeplus = $filter('timedelta')(process.cpu_times);
            process.timemillis = $filter('timemillis')(process.cpu_times);

            process.ioRead = null;
            process.ioWrite = null;

            if (process.io_counters) {
                this.ioReadWritePresent = true;

                process.ioRead  = (process.io_counters[0] - process.io_counters[2]) / process.time_since_update;

                if (process.ioRead != 0) {
                    process.ioRead = $filter('bytes')(process.ioRead);
                }

                process.ioWrite = (process.io_counters[1] - process.io_counters[3]) / process.time_since_update;

                if (process.ioWrite != 0) {
                    process.ioWrite = $filter('bytes')(process.ioWrite);
                }
            }

            process.isNice = process.nice !== undefined && ((data['system'].os_name === 'Windows' && process.nice != 32) || (data['system'].os_name !== 'Windows' && process.nice != 0));

            if (Array.isArray(process.cmdline)) {
                process.cmdline = process.cmdline.join(' ');
            }

            if (data['system'].os_name === 'Windows') {
                process.username = _.last(process.username.split('\\'));
            }

            this.processes.push(process);
        }
    };

    this.getCpuPercentAlert = function(process) {
        return GlancesPlugin.getAlert(_pluginName, 'processlist_cpu_', process.cpu_percent);
    };

    this.getMemoryPercentAlert = function(process) {
        return GlancesPlugin.getAlert(_pluginName, 'processlist_mem_', process.cpu_percent);
    };

    this.getLimit = function() {
        return _maxProcessesToDisplay;
    };
}]);
